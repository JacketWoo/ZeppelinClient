// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef PROTOBUF_client_2eproto__INCLUDED
#define PROTOBUF_client_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eproto();
void protobuf_AssignDesc_client_2eproto();
void protobuf_ShutdownFile_client_2eproto();

class Node;
class CmdRequest;
class CmdRequest_Sync;
class CmdRequest_Set;
class CmdRequest_Get;
class CmdResponse;
class CmdResponse_Sync;
class CmdResponse_Set;
class CmdResponse_Get;

enum Type {
  SYNC = 0,
  SET = 1,
  GET = 2
};
bool Type_IsValid(int value);
const Type Type_MIN = SYNC;
const Type Type_MAX = GET;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum StatusCode {
  kOk = 0,
  kNotFound = 1,
  kError = 2
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = kOk;
const StatusCode StatusCode_MAX = kError;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();
  
  Node(const Node& from);
  
  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();
  
  void Swap(Node* other);
  
  // implements Message ----------------------------------------------
  
  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  
  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:client.Node)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* ip_;
  static const ::std::string _default_ip_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Sync : public ::google::protobuf::Message {
 public:
  CmdRequest_Sync();
  virtual ~CmdRequest_Sync();
  
  CmdRequest_Sync(const CmdRequest_Sync& from);
  
  inline CmdRequest_Sync& operator=(const CmdRequest_Sync& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Sync& default_instance();
  
  void Swap(CmdRequest_Sync* other);
  
  // implements Message ----------------------------------------------
  
  CmdRequest_Sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Sync& from);
  void MergeFrom(const CmdRequest_Sync& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .client.Node node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::client::Node& node() const;
  inline ::client::Node* mutable_node();
  
  // required int32 filenum = 2 [default = 0];
  inline bool has_filenum() const;
  inline void clear_filenum();
  static const int kFilenumFieldNumber = 2;
  inline ::google::protobuf::int32 filenum() const;
  inline void set_filenum(::google::protobuf::int32 value);
  
  // required int32 offset = 3 [default = 0];
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:client.CmdRequest.Sync)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::client::Node* node_;
  ::google::protobuf::int32 filenum_;
  ::google::protobuf::int32 offset_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CmdRequest_Sync* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Set : public ::google::protobuf::Message {
 public:
  CmdRequest_Set();
  virtual ~CmdRequest_Set();
  
  CmdRequest_Set(const CmdRequest_Set& from);
  
  inline CmdRequest_Set& operator=(const CmdRequest_Set& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Set& default_instance();
  
  void Swap(CmdRequest_Set* other);
  
  // implements Message ----------------------------------------------
  
  CmdRequest_Set* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Set& from);
  void MergeFrom(const CmdRequest_Set& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  
  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  
  // optional bytes uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  
  // @@protoc_insertion_point(class_scope:client.CmdRequest.Set)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  ::std::string* uuid_;
  static const ::std::string _default_uuid_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CmdRequest_Set* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Get : public ::google::protobuf::Message {
 public:
  CmdRequest_Get();
  virtual ~CmdRequest_Get();
  
  CmdRequest_Get(const CmdRequest_Get& from);
  
  inline CmdRequest_Get& operator=(const CmdRequest_Get& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Get& default_instance();
  
  void Swap(CmdRequest_Get* other);
  
  // implements Message ----------------------------------------------
  
  CmdRequest_Get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Get& from);
  void MergeFrom(const CmdRequest_Get& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  
  // optional bytes uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  
  // @@protoc_insertion_point(class_scope:client.CmdRequest.Get)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* uuid_;
  static const ::std::string _default_uuid_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CmdRequest_Get* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest : public ::google::protobuf::Message {
 public:
  CmdRequest();
  virtual ~CmdRequest();
  
  CmdRequest(const CmdRequest& from);
  
  inline CmdRequest& operator=(const CmdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest& default_instance();
  
  void Swap(CmdRequest* other);
  
  // implements Message ----------------------------------------------
  
  CmdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest& from);
  void MergeFrom(const CmdRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CmdRequest_Sync Sync;
  typedef CmdRequest_Set Set;
  typedef CmdRequest_Get Get;
  
  // accessors -------------------------------------------------------
  
  // required .client.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline client::Type type() const;
  inline void set_type(client::Type value);
  
  // optional .client.CmdRequest.Sync sync = 2;
  inline bool has_sync() const;
  inline void clear_sync();
  static const int kSyncFieldNumber = 2;
  inline const ::client::CmdRequest_Sync& sync() const;
  inline ::client::CmdRequest_Sync* mutable_sync();
  
  // optional .client.CmdRequest.Set set = 3;
  inline bool has_set() const;
  inline void clear_set();
  static const int kSetFieldNumber = 3;
  inline const ::client::CmdRequest_Set& set() const;
  inline ::client::CmdRequest_Set* mutable_set();
  
  // optional .client.CmdRequest.Get get = 4;
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 4;
  inline const ::client::CmdRequest_Get& get() const;
  inline ::client::CmdRequest_Get* mutable_get();
  
  // @@protoc_insertion_point(class_scope:client.CmdRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::client::CmdRequest_Sync* sync_;
  ::client::CmdRequest_Set* set_;
  ::client::CmdRequest_Get* get_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CmdRequest* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_Sync : public ::google::protobuf::Message {
 public:
  CmdResponse_Sync();
  virtual ~CmdResponse_Sync();
  
  CmdResponse_Sync(const CmdResponse_Sync& from);
  
  inline CmdResponse_Sync& operator=(const CmdResponse_Sync& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_Sync& default_instance();
  
  void Swap(CmdResponse_Sync* other);
  
  // implements Message ----------------------------------------------
  
  CmdResponse_Sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_Sync& from);
  void MergeFrom(const CmdResponse_Sync& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .client.StatusCode code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline client::StatusCode code() const;
  inline void set_code(client::StatusCode value);
  
  // optional bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // @@protoc_insertion_point(class_scope:client.CmdResponse.Sync)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int code_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CmdResponse_Sync* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_Set : public ::google::protobuf::Message {
 public:
  CmdResponse_Set();
  virtual ~CmdResponse_Set();
  
  CmdResponse_Set(const CmdResponse_Set& from);
  
  inline CmdResponse_Set& operator=(const CmdResponse_Set& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_Set& default_instance();
  
  void Swap(CmdResponse_Set* other);
  
  // implements Message ----------------------------------------------
  
  CmdResponse_Set* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_Set& from);
  void MergeFrom(const CmdResponse_Set& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .client.StatusCode code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline client::StatusCode code() const;
  inline void set_code(client::StatusCode value);
  
  // optional bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // @@protoc_insertion_point(class_scope:client.CmdResponse.Set)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int code_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CmdResponse_Set* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_Get : public ::google::protobuf::Message {
 public:
  CmdResponse_Get();
  virtual ~CmdResponse_Get();
  
  CmdResponse_Get(const CmdResponse_Get& from);
  
  inline CmdResponse_Get& operator=(const CmdResponse_Get& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_Get& default_instance();
  
  void Swap(CmdResponse_Get* other);
  
  // implements Message ----------------------------------------------
  
  CmdResponse_Get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_Get& from);
  void MergeFrom(const CmdResponse_Get& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .client.StatusCode code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline client::StatusCode code() const;
  inline void set_code(client::StatusCode value);
  
  // optional bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional bytes value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  
  // @@protoc_insertion_point(class_scope:client.CmdResponse.Get)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int code_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CmdResponse_Get* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse : public ::google::protobuf::Message {
 public:
  CmdResponse();
  virtual ~CmdResponse();
  
  CmdResponse(const CmdResponse& from);
  
  inline CmdResponse& operator=(const CmdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse& default_instance();
  
  void Swap(CmdResponse* other);
  
  // implements Message ----------------------------------------------
  
  CmdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse& from);
  void MergeFrom(const CmdResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CmdResponse_Sync Sync;
  typedef CmdResponse_Set Set;
  typedef CmdResponse_Get Get;
  
  // accessors -------------------------------------------------------
  
  // required .client.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline client::Type type() const;
  inline void set_type(client::Type value);
  
  // optional .client.CmdResponse.Sync sync = 2;
  inline bool has_sync() const;
  inline void clear_sync();
  static const int kSyncFieldNumber = 2;
  inline const ::client::CmdResponse_Sync& sync() const;
  inline ::client::CmdResponse_Sync* mutable_sync();
  
  // optional .client.CmdResponse.Set set = 3;
  inline bool has_set() const;
  inline void clear_set();
  static const int kSetFieldNumber = 3;
  inline const ::client::CmdResponse_Set& set() const;
  inline ::client::CmdResponse_Set* mutable_set();
  
  // optional .client.CmdResponse.Get get = 4;
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 4;
  inline const ::client::CmdResponse_Get& get() const;
  inline ::client::CmdResponse_Get* mutable_get();
  
  // @@protoc_insertion_point(class_scope:client.CmdResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::client::CmdResponse_Sync* sync_;
  ::client::CmdResponse_Set* set_;
  ::client::CmdResponse_Get* get_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CmdResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// required bytes ip = 1;
inline bool Node::has_ip() const {
  return _has_bit(0);
}
inline void Node::clear_ip() {
  if (ip_ != &_default_ip_) {
    ip_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Node::ip() const {
  return *ip_;
}
inline void Node::set_ip(const ::std::string& value) {
  _set_bit(0);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value) {
  _set_bit(0);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const void* value, size_t size) {
  _set_bit(0);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_ip() {
  _set_bit(0);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  return ip_;
}

// required int32 port = 2;
inline bool Node::has_port() const {
  return _has_bit(1);
}
inline void Node::clear_port() {
  port_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Node::port() const {
  return port_;
}
inline void Node::set_port(::google::protobuf::int32 value) {
  _set_bit(1);
  port_ = value;
}

// -------------------------------------------------------------------

// CmdRequest_Sync

// required .client.Node node = 1;
inline bool CmdRequest_Sync::has_node() const {
  return _has_bit(0);
}
inline void CmdRequest_Sync::clear_node() {
  if (node_ != NULL) node_->::client::Node::Clear();
  _clear_bit(0);
}
inline const ::client::Node& CmdRequest_Sync::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::client::Node* CmdRequest_Sync::mutable_node() {
  _set_bit(0);
  if (node_ == NULL) node_ = new ::client::Node;
  return node_;
}

// required int32 filenum = 2 [default = 0];
inline bool CmdRequest_Sync::has_filenum() const {
  return _has_bit(1);
}
inline void CmdRequest_Sync::clear_filenum() {
  filenum_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CmdRequest_Sync::filenum() const {
  return filenum_;
}
inline void CmdRequest_Sync::set_filenum(::google::protobuf::int32 value) {
  _set_bit(1);
  filenum_ = value;
}

// required int32 offset = 3 [default = 0];
inline bool CmdRequest_Sync::has_offset() const {
  return _has_bit(2);
}
inline void CmdRequest_Sync::clear_offset() {
  offset_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CmdRequest_Sync::offset() const {
  return offset_;
}
inline void CmdRequest_Sync::set_offset(::google::protobuf::int32 value) {
  _set_bit(2);
  offset_ = value;
}

// -------------------------------------------------------------------

// CmdRequest_Set

// required bytes key = 1;
inline bool CmdRequest_Set::has_key() const {
  return _has_bit(0);
}
inline void CmdRequest_Set::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CmdRequest_Set::key() const {
  return *key_;
}
inline void CmdRequest_Set::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Set::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Set::set_key(const void* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Set::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// required bytes value = 2;
inline bool CmdRequest_Set::has_value() const {
  return _has_bit(1);
}
inline void CmdRequest_Set::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CmdRequest_Set::value() const {
  return *value_;
}
inline void CmdRequest_Set::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdRequest_Set::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdRequest_Set::set_value(const void* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Set::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// optional bytes uuid = 3;
inline bool CmdRequest_Set::has_uuid() const {
  return _has_bit(2);
}
inline void CmdRequest_Set::clear_uuid() {
  if (uuid_ != &_default_uuid_) {
    uuid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CmdRequest_Set::uuid() const {
  return *uuid_;
}
inline void CmdRequest_Set::set_uuid(const ::std::string& value) {
  _set_bit(2);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Set::set_uuid(const char* value) {
  _set_bit(2);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Set::set_uuid(const void* value, size_t size) {
  _set_bit(2);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Set::mutable_uuid() {
  _set_bit(2);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}

// -------------------------------------------------------------------

// CmdRequest_Get

// required bytes key = 1;
inline bool CmdRequest_Get::has_key() const {
  return _has_bit(0);
}
inline void CmdRequest_Get::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CmdRequest_Get::key() const {
  return *key_;
}
inline void CmdRequest_Get::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Get::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Get::set_key(const void* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Get::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// optional bytes uuid = 2;
inline bool CmdRequest_Get::has_uuid() const {
  return _has_bit(1);
}
inline void CmdRequest_Get::clear_uuid() {
  if (uuid_ != &_default_uuid_) {
    uuid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CmdRequest_Get::uuid() const {
  return *uuid_;
}
inline void CmdRequest_Get::set_uuid(const ::std::string& value) {
  _set_bit(1);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Get::set_uuid(const char* value) {
  _set_bit(1);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Get::set_uuid(const void* value, size_t size) {
  _set_bit(1);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Get::mutable_uuid() {
  _set_bit(1);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}

// -------------------------------------------------------------------

// CmdRequest

// required .client.Type type = 1;
inline bool CmdRequest::has_type() const {
  return _has_bit(0);
}
inline void CmdRequest::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline client::Type CmdRequest::type() const {
  return static_cast< client::Type >(type_);
}
inline void CmdRequest::set_type(client::Type value) {
  GOOGLE_DCHECK(client::Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// optional .client.CmdRequest.Sync sync = 2;
inline bool CmdRequest::has_sync() const {
  return _has_bit(1);
}
inline void CmdRequest::clear_sync() {
  if (sync_ != NULL) sync_->::client::CmdRequest_Sync::Clear();
  _clear_bit(1);
}
inline const ::client::CmdRequest_Sync& CmdRequest::sync() const {
  return sync_ != NULL ? *sync_ : *default_instance_->sync_;
}
inline ::client::CmdRequest_Sync* CmdRequest::mutable_sync() {
  _set_bit(1);
  if (sync_ == NULL) sync_ = new ::client::CmdRequest_Sync;
  return sync_;
}

// optional .client.CmdRequest.Set set = 3;
inline bool CmdRequest::has_set() const {
  return _has_bit(2);
}
inline void CmdRequest::clear_set() {
  if (set_ != NULL) set_->::client::CmdRequest_Set::Clear();
  _clear_bit(2);
}
inline const ::client::CmdRequest_Set& CmdRequest::set() const {
  return set_ != NULL ? *set_ : *default_instance_->set_;
}
inline ::client::CmdRequest_Set* CmdRequest::mutable_set() {
  _set_bit(2);
  if (set_ == NULL) set_ = new ::client::CmdRequest_Set;
  return set_;
}

// optional .client.CmdRequest.Get get = 4;
inline bool CmdRequest::has_get() const {
  return _has_bit(3);
}
inline void CmdRequest::clear_get() {
  if (get_ != NULL) get_->::client::CmdRequest_Get::Clear();
  _clear_bit(3);
}
inline const ::client::CmdRequest_Get& CmdRequest::get() const {
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
inline ::client::CmdRequest_Get* CmdRequest::mutable_get() {
  _set_bit(3);
  if (get_ == NULL) get_ = new ::client::CmdRequest_Get;
  return get_;
}

// -------------------------------------------------------------------

// CmdResponse_Sync

// required .client.StatusCode code = 1;
inline bool CmdResponse_Sync::has_code() const {
  return _has_bit(0);
}
inline void CmdResponse_Sync::clear_code() {
  code_ = 0;
  _clear_bit(0);
}
inline client::StatusCode CmdResponse_Sync::code() const {
  return static_cast< client::StatusCode >(code_);
}
inline void CmdResponse_Sync::set_code(client::StatusCode value) {
  GOOGLE_DCHECK(client::StatusCode_IsValid(value));
  _set_bit(0);
  code_ = value;
}

// optional bytes msg = 2;
inline bool CmdResponse_Sync::has_msg() const {
  return _has_bit(1);
}
inline void CmdResponse_Sync::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CmdResponse_Sync::msg() const {
  return *msg_;
}
inline void CmdResponse_Sync::set_msg(const ::std::string& value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse_Sync::set_msg(const char* value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse_Sync::set_msg(const void* value, size_t size) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_Sync::mutable_msg() {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// -------------------------------------------------------------------

// CmdResponse_Set

// required .client.StatusCode code = 1;
inline bool CmdResponse_Set::has_code() const {
  return _has_bit(0);
}
inline void CmdResponse_Set::clear_code() {
  code_ = 0;
  _clear_bit(0);
}
inline client::StatusCode CmdResponse_Set::code() const {
  return static_cast< client::StatusCode >(code_);
}
inline void CmdResponse_Set::set_code(client::StatusCode value) {
  GOOGLE_DCHECK(client::StatusCode_IsValid(value));
  _set_bit(0);
  code_ = value;
}

// optional bytes msg = 2;
inline bool CmdResponse_Set::has_msg() const {
  return _has_bit(1);
}
inline void CmdResponse_Set::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CmdResponse_Set::msg() const {
  return *msg_;
}
inline void CmdResponse_Set::set_msg(const ::std::string& value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse_Set::set_msg(const char* value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse_Set::set_msg(const void* value, size_t size) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_Set::mutable_msg() {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// -------------------------------------------------------------------

// CmdResponse_Get

// required .client.StatusCode code = 1;
inline bool CmdResponse_Get::has_code() const {
  return _has_bit(0);
}
inline void CmdResponse_Get::clear_code() {
  code_ = 0;
  _clear_bit(0);
}
inline client::StatusCode CmdResponse_Get::code() const {
  return static_cast< client::StatusCode >(code_);
}
inline void CmdResponse_Get::set_code(client::StatusCode value) {
  GOOGLE_DCHECK(client::StatusCode_IsValid(value));
  _set_bit(0);
  code_ = value;
}

// optional bytes msg = 2;
inline bool CmdResponse_Get::has_msg() const {
  return _has_bit(1);
}
inline void CmdResponse_Get::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CmdResponse_Get::msg() const {
  return *msg_;
}
inline void CmdResponse_Get::set_msg(const ::std::string& value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse_Get::set_msg(const char* value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse_Get::set_msg(const void* value, size_t size) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_Get::mutable_msg() {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional bytes value = 3;
inline bool CmdResponse_Get::has_value() const {
  return _has_bit(2);
}
inline void CmdResponse_Get::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CmdResponse_Get::value() const {
  return *value_;
}
inline void CmdResponse_Get::set_value(const ::std::string& value) {
  _set_bit(2);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_Get::set_value(const char* value) {
  _set_bit(2);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_Get::set_value(const void* value, size_t size) {
  _set_bit(2);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_Get::mutable_value() {
  _set_bit(2);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// CmdResponse

// required .client.Type type = 1;
inline bool CmdResponse::has_type() const {
  return _has_bit(0);
}
inline void CmdResponse::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline client::Type CmdResponse::type() const {
  return static_cast< client::Type >(type_);
}
inline void CmdResponse::set_type(client::Type value) {
  GOOGLE_DCHECK(client::Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// optional .client.CmdResponse.Sync sync = 2;
inline bool CmdResponse::has_sync() const {
  return _has_bit(1);
}
inline void CmdResponse::clear_sync() {
  if (sync_ != NULL) sync_->::client::CmdResponse_Sync::Clear();
  _clear_bit(1);
}
inline const ::client::CmdResponse_Sync& CmdResponse::sync() const {
  return sync_ != NULL ? *sync_ : *default_instance_->sync_;
}
inline ::client::CmdResponse_Sync* CmdResponse::mutable_sync() {
  _set_bit(1);
  if (sync_ == NULL) sync_ = new ::client::CmdResponse_Sync;
  return sync_;
}

// optional .client.CmdResponse.Set set = 3;
inline bool CmdResponse::has_set() const {
  return _has_bit(2);
}
inline void CmdResponse::clear_set() {
  if (set_ != NULL) set_->::client::CmdResponse_Set::Clear();
  _clear_bit(2);
}
inline const ::client::CmdResponse_Set& CmdResponse::set() const {
  return set_ != NULL ? *set_ : *default_instance_->set_;
}
inline ::client::CmdResponse_Set* CmdResponse::mutable_set() {
  _set_bit(2);
  if (set_ == NULL) set_ = new ::client::CmdResponse_Set;
  return set_;
}

// optional .client.CmdResponse.Get get = 4;
inline bool CmdResponse::has_get() const {
  return _has_bit(3);
}
inline void CmdResponse::clear_get() {
  if (get_ != NULL) get_->::client::CmdResponse_Get::Clear();
  _clear_bit(3);
}
inline const ::client::CmdResponse_Get& CmdResponse::get() const {
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
inline ::client::CmdResponse_Get* CmdResponse::mutable_get() {
  _set_bit(3);
  if (get_ == NULL) get_ = new ::client::CmdResponse_Get;
  return get_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< client::Type>() {
  return client::Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< client::StatusCode>() {
  return client::StatusCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eproto__INCLUDED
